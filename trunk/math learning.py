import math
import socket
"""
a = 1+1
print a
a = 2*2
print a
a = 4.0/2.0
print a
a = 2.0*0.5
print a
a = 4.0-2.3
print a


a = 3.0 ** 2.0
print a
a = 3.0 ** 1.4
print a
a = 4.7 ** 3.0
print a

import math
print math.sqrt(3.0)
print math.floor(3.8) == 3.0
print math.ceil(3.1) == 4.0
print int(3.6 + 0.5)
print int(3.6)


a=1;b=2;c=3;d=4;e=5;f=6;g=7
print a*b*c*d*e*f*g
"""



"""----------------------------------------------"""
"""----------------------------------------------""
(7-1)*(7+1) = 48
49-1 = 48
6*8 = 48
""----------------------------------------------""
7*7+7-7-1
49+7-7-1
""----------------------------------------------""
(7-5)*(7-4)
(49-28-35+20)
""----------------------------------------------""
((7-3) * (7-2))
(49-14-21+6)
""----------------------------------------------"""
"""----------------------------------------------"""
"""40320"""
'''40320'''

Alpha = 1
Omega = 7

a=8;b=2;c=3;d=4;e=5;f=6;g=7
print a*b*c*d*e*f*g
print 2*3*4*5*6*7*8
print (7-5) * (7-4) * (7-3) * (7-2) * (7-1) * (7+1) * 7
print ((7-5) * (7-4)) * ((7-3) * (7-2)) * ((7-1) * (7+1)) * 7
print ((7-5) * (7-4)) * ((7-3) * (7-2)) * (7*7+7-7-1) * 7
print ((7-5) * (7-4)) * ((7-3) * (7-2)) * (7*7+7-7-1) * 7
print (49-28-35+20)*(49-14-21+6)*(49+7-7-1)*7
print (7*7-7*4-7*5+20)*(7*7-7*2-7*3+6)*(7*7+7*1-7*1-1)*7
print (7*(7-4-5)+20)*(7*(7-2-3)+6)*(7*(7+1-1)-1)*7
print (7*(7-(7-3)-(7-2))+(7*3-1))*(7*(7-(7-5)-(7-4))+(7-1))*(7*(7+(7-6)-(7-6))-(7-6))*7
print (7*-2+20)*(7*2+6)*(7*7-1)*7
print (7*-(7-5)+(7*3-(7-6)))*(7*(7-5)+(7-1))*(7*7-(7-6))*7
print (7*-(7-5)+(7*3-(7-6)))*(7*(7-5)+(7-1))*(7*7-(7-6))*7
print (7*-(7-(7-2))+(7*3-(7-(7-1))))*(7*(7-(7-2))+(7-(7-6)))*(7*7-(7-6))*7
print (7*-(7-(7-(7-5)))+(7*(7-4)-(7-(7-(7-6)))))*(7*(7-(7-(7-5)))+(7-(7-(7-1))))*(7*7-(7-(7-1)))*7
print (7*-(7-(7-(7-(7-2))))+(7*(7-(7-3))-(7-(7-(7-(7-1))))))*(7*(7-(7-(7-(7-2))))+(7-(7-(7-(7-6)))))*(7*7-(7-(7-(7-6))))*7
print (7*-(7-(7-(7-(7-2))))+(7*(7-(7-3))-(7-(7-(7-(7-1))))))*(7*(7-(7-(7-(7-2))))+(7-(7-(7-(7-6)))))*(7*7-(7-(7-(7-6))))*7
print (7*-(7-(7-(7-(7-(7-(7-2))))))+(7*(7-(7-(7-(7-3))))-(7-(7-(7-(7-(7-(7-1))))))))*(7*(7-(7-(7-(7-(7-(7-2))))))+(7-(7-(7-(7-(7-(7-6)))))))*(7*7-(7-(7-(7-(7-(7-6))))))*7
print (7*-(7-(7-(7-(7-(7-(7-(7-(7-2))))))))+(7*(7-(7-(7-(7-(7-(7-3))))))-(7-(7-(7-(7-(7-(7-(7-(7-1))))))))))*(7*(7-(7-(7-(7-(7-(7-(7-(7-2))))))))+(7-(7-(7-(7-(7-(7-(7-(7-6)))))))))*(7*7-(7-(7-(7-(7-(7-(7-(7-6))))))))*7
print (7*-(7-(7-(7-(7-(7-(7-(7-(7-(7-5)))))))))+(7*(7-(7-(7-(7-(7-(7-(7-4)))))))-(7-(7-(7-(7-(7-(7-(7-(7-(7-6)))))))))))*(7*(7-(7-(7-(7-(7-(7-(7-(7-(7-5)))))))))+(7-(7-(7-(7-(7-(7-(7-(7-(7-1))))))))))*(7*7-(7-(7-(7-(7-(7-(7-(7-(7-1)))))))))*7
print (7*-(7-(7-(7-(7-(7-(7-(7-(7-(7-(7-(7-(1)-(1)-(1)-(1)-(1))))))))))))+(7*(7-(7-(7-(7-(7-(7-(7-(7-(7-(1)-(1)-(1)-(1))))))))))-(7-(7-(7-(7-(7-(7-(7-(7-(7-(7-(1)))))))))))))*(7*(7-(7-(7-(7-(7-(7-(7-(7-(7-(7-(7-(1)-(1)-(1)-(1)-(1))))))))))))+(7-(7-(7-(7-(7-(7-(7-(7-(7-(7-(7-(1)))))))))))))*(7*7-(7-(7-(7-(7-(7-(7-(7-(7-(7-(7-(1))))))))))))*7


a=7;b=42
a
b
print a*b
print 7*42
print 7*7*6
print 7*7*(7-1)
"0111*0111*(0111-01)"

a=42;b=7;c=36
aaa = a,b,c
aaa[0];aaa[1];aaa[2]
aaa = [a,b,c]
aaa[0];aaa[1];aaa[2]
aaa = {}
aaa["a"] = 42
print a*b*c
print 7*6*7*6*6
class Es:
	def __init__(self):
		self.a = 0

class Est(Es):
	def __init__(self, a,b,c):
		Es.__init__(self)
	def Estos(self, asd):
		print self.a+asd
	def Estus(self):
		self.Estos(3)
		a = "%d %s\t\r\n " % (30,"asd")
		print `3`

estObj = Est(1,2,3)
estObj.Estus()
a = 1==1
a = 1!=1
a = True and False
a = False or True
a = not True
a = not 3
a = None
if a == None:
	print "Yes it is None"
a = 2 << 3
a = 2 >> 2
a = (1 << 3)-1
print a
a = 7 >> 2
print a

"""
help(math)
dir(math)
math.sqrt(2.0)
"""

#1 is in binary 01
#7 is in binary 0111
'''
targetStr = ["<", "7", "*", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "1", ">", "-", "<", "1", ">", "-", "<", "1", ">", "-", "<", "1", ">", "-", "<", "1", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "+", "<", "7", "*", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "1", ">", "-", "<", "1", ">", "-", "<", "1", ">", "-", "<", "1", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "1", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "*", "<", "7", "*", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "1", ">", "-", "<", "1", ">", "-", "<", "1", ">", "-", "<", "1", ">", "-", "<", "1", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "+", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "1", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "*", "<", "7", "*", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "7", "-", "<", "1", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", ">", "*", "7", ]


def Do(a):
	opens = 0
	closes = 0
	multis = 0
	stack = []
	
	plus = "+"
	minus = "-"
	opener = "<"
	closer = ">"
	mult = "*"
	
	opened = []
	openedPoses = []
	closed = []
	closedPoses = []
	multSymPoses = []
	openPosForMult = []
	closePosForMult = []
	
	idx = 0
	multDetected = False
	waitingForClose = False
	print "".join(a)
	for ch in a:
		"""
		print ch, mult, ch == mult
		"""
		if ch == plus:
			pass
		elif ch == minus:
			pass
		elif ch == opener:
			opens += 1
			opened += [ch]
			openedPoses += [idx]
			if multDetected:
				openPosForMult += [idx]
				waitingForClose = True
				multDetected = False

		elif ch == closer:
			closes += 1
			closed += [ch]
			closedPoses += [idx]
			del openedPoses[-1]
			if waitingForClose:
				waitingForClose = False
				print openedPoses, openPosForMult
				if openedPoses[-1] == openPosForMult[-1]:
					print "Found", multSymPoses, openedPoses, closedPoses
					
		elif ch == mult:
			multDetected = True
			multSymPoses += [idx]
			
			#print openedPoses
			#print openedPoses[-1], closedPoses[-1]
			#print stack

		stack += [ch]
		idx += 1
		"""
		if idx > 20:
			break
		"""
	
	popped = stack[-1]
	del stack[-1]
	#print stack, popped
	while True:
		break
		continue

Do(targetStr)
'''
